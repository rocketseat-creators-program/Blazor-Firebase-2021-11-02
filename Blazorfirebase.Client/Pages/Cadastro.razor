@page "/cadastro"
@inject AuthenticationStateProvider authProvider
@inject IJSRuntime jsRuntime
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations

<div class="container-fluid border">
    <div class="row">
        <div class="col-sm col-md px-md-3 py-md-3">            
            <div class="form-group">
                <label for="InputEmail">Email</label>
                <input @bind-value="model.Username" type="email" class="form-control" id="InputEmail" aria-describedby="emailHelp" placeholder="ex: email@email.com">
            </div>
            <div class="form-group">
                <label for="InputPassword">Senha</label>
                <input @bind-value="model.Password" type="password" class="form-control" id="InputPassword" placeholder="Senha">
            </div>
            <div class="form-group">
                <label for="InputPassword2">Confirmar-senha</label>
                <input @bind-value="model.ConfirmPassword" type="password" class="form-control" id="InputPassword2" placeholder="Confirme a senha">
            </div>
            <button @onclick="CreateUser" class="btn btn-primary">Cadastrar</button>
        </div>
    </div>
</div>
@code
{
    public class LoginModel
    {
        [Required]
        public string Username { get; set; }
        [Required]
        public string Password { get; set; }
        [Required]
        public string ConfirmPassword { get; set; }
    }
    private LoginModel model = new LoginModel();
    private Task<IJSObjectReference> _internalModule;
    private Task<IJSObjectReference> Module => _internalModule ??= jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Authentication.js").AsTask();
    private async Task CreateUser()
    {
        var module = await Module;
        var created = await module.InvokeAsync<bool>("CreateUser", model.Username, model.Password);
        if (created)
            Console.WriteLine("Usuario criado com sucesso");
        else
            Console.WriteLine("Erro na criação do usuario");
    }
}